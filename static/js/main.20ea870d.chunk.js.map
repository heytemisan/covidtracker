{"version":3,"sources":["InfoBox.jsx","util.js","Map.js","Table.jsx","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","total","active","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchData","fetch","then","response","json","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","getCountriesData","name","iso2","sortedData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","fontFamily","class","href","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20ea870d.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@mui/material';\nimport React from 'react';\nimport \"./InfoBox.css\";\n\n\nfunction InfoBox({title, cases, isRed, total, active, ...props}) {\n    return (\n        <Card\n        onClick={props.onClick}\n        /*modify the element*/\n        className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\n            <CardContent>\n                {/* Title of the Coronavirus cases*/}\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n                {/* Cases of Coronavirus*/}\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n                {/* Total Deaths*/}\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    multiplier: 200,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    multiplier: 400,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    multiplier: 800,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n\n  return sortedData.sort((a, b)=> (a.cases > b.cases ? -1: 1));\n};\n\n//cases formatter\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n//draw circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType =\"cases\") => \n data.map((country) => (\n  <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n\n  <Popup>\n    <div className=\"info-container\">\n      <div\n        className=\"info-flag\"\n        style={{backgroundImage: `url(${country.countryInfo.flag})`}}\n      />\n      <div className=\"info-name\">{country.country}</div>\n      <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n      <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n      <div className=\"info-death\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n    </div>\n  </Popup>\n  </Circle>\n));","import React from \"react\";\nimport \"./Map.css\";\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({countries, casesType, center, zoom}) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer \n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;","import numeral from 'numeral';\nimport \"./Table.css\";\nimport React from 'react';\n\nfunction Table({ countries }) {\nreturn (\n    <div className=\"table\">\n    {countries.map((country) => (\n        <tr>\n        <td>{country.country}</td>\n        <td>\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n        </td>\n        </tr>\n    ))}\n    </div>\n);\n}\n\nexport default Table\n"," import React, {useEffect, useState} from 'react';\nimport {Line} from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\n\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n\n    for(let date in data.cases){\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date]-lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n}\n\n\nfunction LineGraph({casesType = \"cases\", ...props}) {\n    const [data,setData]= useState({});\n\n    useEffect(()=> {\n        const fetchData = async()=> {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\n            .then((response) => {\n                return response.json();\n            })\n            .then((data)=> {\n                let chartData = buildChartData(data, \"cases\");\n                setData(chartData);\n            });\n        };\n        fetchData();\n    }, [casesType]) ;\n\n   \n    return (\n        <div className={props.className}>\n            {data?.length > 0 && (\n                <Line \n                data = {{\n                        datasets: [{\n                            backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                            borderColor: \"#CC1034\",\n                            data: data,\n                                    },],\n                }}\n                options= {options}\n                />\n            )}\n          <div>\n          </div>\n        </div>\n    )\n}\n\nexport default LineGraph\n","import React, {useState, useEffect} from 'react'; \nimport './App.css';\nimport { FormControl, MenuItem, Select, Card, CardContent} from '@mui/material';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport './Table.css';\nimport {prettyPrintStat, sortData} from \"./util\";\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData]= useState([]);\n  const [mapCenter, setMapCenter]= useState({lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(()=> {\n    fetch (\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then((data)=> {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  //once APP loads the useEffect gets triggered once.\n  useEffect(()=> {\n    //async -> send request & wait for it\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data)=> {\n        //restructure json tree-> map essentially loops through the array and returns a modified array\n        const countries = data.map((country)=> ({\n          name: country.country, //United States, Nigeria\n          value: country.countryInfo.iso2, //UK, NG, FR\n        }));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value; \n    const url = \n    countryCode === \"worldwide\" \n    ? \"https://disease.sh/v3/covid-19/all\"\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then((response) => response.json())\n    .then((data)=> {\n      setCountry(countryCode); //update input field\n      setCountryInfo(data); //get all data\n      setMapCenter([data.countryInfo.lat, data.countryInfo.lng]);\n      setMapZoom(4);\n    });\n  };\n \n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            {/* {loop through all the countries and a show a drop down list of the options} */}\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n                <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                //map essentially loops through the array\n                countries.map((country)=> (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }            \n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n            <InfoBox \n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e)=> setCasesType('cases')}\n              title=\"Coronavirus Cases\" \n              total={prettyPrintStat(countryInfo.todayCases)} \n              cases={prettyPrintStat(countryInfo.cases)}/>\n\n            <InfoBox \n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType('recovered')}\n              title=\"Recovered\" \n              total={prettyPrintStat(countryInfo.todayRecovered)} \n              cases={prettyPrintStat(countryInfo.recovered)}/>\n\n            <InfoBox \n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e)=> setCasesType('deaths')}\n              title=\"Deaths\" \n              total={prettyPrintStat(countryInfo.todayDeaths)} \n              cases={prettyPrintStat(countryInfo.deaths)}/>\n          </div>\n        <Map \n        casesType={casesType}\n        zoom= {mapZoom}\n        center={mapCenter}\n        countries={mapCountries}\n        />\n    </div>\n    <Card className=\"app__right\">\n      <CardContent>\n        <h3>Live Cases by Country</h3>\n        <Table countries={tableData}/>\n        <h3 className=\"app__graphTitle \">Worldwide new {casesType}</h3>\n        <LineGraph className=\"app__graph\" casesType={casesType}/>\n        <div className=\"text-center m-3 py-2 border rounded-pill\">\n          <h3 className=\"text-dark\" style={{fontFamily:'Ephesis'}}>Created By Temisan. <a\n          class='social-icon-link-github'\n          href=\"https://www.facebook.com/temy.momodu\"\n          target='_blank'\n          rel=\"noopener\"\n          aria-label='Facebook'  \n        >\n          <i class='fab fa-facebook'/>\n        </a></h3>\n        </div>\n      </CardContent>\n    </Card> \n    </div>\n  );\n} \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}